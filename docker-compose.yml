services:
  # ===============================================
  # BASES DE DATOS
  # ===============================================
  
  # PostgreSQL para User Service
  postgres:
    image: postgres:15
    container_name: microservices-postgres
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB para Product Service
  mongodb:
    image: mongo:7
    container_name: microservices-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo123
      MONGO_INITDB_DATABASE: productdb
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para Notification Service
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NATS para comunicaci√≥n entre microservicios
  nats:
    image: nats:2.10-alpine
    container_name: microservices-nats
    ports:
      - "4222:4222"   # puerto para conexiones de clientes
      - "8222:8222"   # puerto para el panel de monitoreo (HTTP)
    command: ["-js", "-m", "8222"]  # habilita JetStream y monitoreo
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===============================================
  # MICROSERVICIOS
  # ===============================================

  # User Service
  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/userdb
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - ./microservices/user-service:/app
      - /app/node_modules
      - /app/generated
    command: sh -c "npm run prisma:generate && npm run prisma:push && npm run start:dev"
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./microservices/product-service
      dockerfile: Dockerfile
    container_name: product-service
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=development
      - DATABASE_URL=mongodb://mongo:mongo123@mongodb:27017/productdb?authSource=admin
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - NATS_URL=nats://nats:4222
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - ./microservices/product-service:/app
      - /app/node_modules
    command: sh -c "npm run prisma:generate && npm run prisma:push && npm run start:dev"
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - '3003:3003'
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - NATS_URL=nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    volumes:
      - ./microservices/notification-service:/app
      - /app/node_modules
    command: npm run start:dev
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - USER_SERVICE_URL=http://user-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - NOTIFICATION_SERVICE_URL=http://notification-service:3003
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - NATS_URL=nats://nats:4222
    depends_on:
      - user-service
      - product-service
      - notification-service
      - nats
    networks:
      - microservices-network
    volumes:
      - ./microservices/api-gateway:/app
      - /app/node_modules
    command: npm run start:dev
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
